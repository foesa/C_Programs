


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             AsmTemplate, CODE, READONLY
    2 00000000                 IMPORT           main
    3 00000000         
    4 00000000         ; sample program makes the 4 LEDs P1.16, P1.17, P1.18, P
                       1.19 go on and off in sequence
    5 00000000         ; (c) Mike Brady, 2011 -- 2019.
    6 00000000         
    7 00000000                 EXPORT           start
    8 00000000         start
    9 00000000         
   10 00000000 E0028018 
                       IO_DIR  EQU              0xE0028018
   11 00000000 E0028014 
                       IO_SET  EQU              0xE0028014
   12 00000000 E002801C 
                       IO_CLR  EQU              0xE002801C
   13 00000000         
   14 00000000         ; ldr r1,=IO1DIR
   15 00000000         ; ldr r2,=0x000f0000 ;select P1.19--P1.16
   16 00000000         ; str r2,[r1]  ;make them outputs
   17 00000000         ; ldr r1,=IO1SET
   18 00000000         ; str r2,[r1]  ;set them to turn the LEDs off
   19 00000000         ; ldr r2,=IO1CLR
   20 00000000         ; r1 points to the SET register
   21 00000000         ; r2 points to the CLEAR register
   22 00000000         
   23 00000000         ; ldr r5,=0x00100000 ; end when the mask reaches this va
                       lue
   24 00000000         ;wloop ldr r3,=0x00010000 ; start with P1.16.
   25 00000000         ;floop str r3,[r2]     ; clear the bit -> turn on the LE
                       D
   26 00000000         ;
   27 00000000         ;delay for about a half second
   28 00000000         ; ldr r4,=4000000   ; timerDelay = A NUMBER
   29 00000000         ;dloop subs r4,r4,#1 ; while(timerDelay-- > 0){
   30 00000000         ; bne dloop    ; }
   31 00000000         ;
   32 00000000         ; str r3,[r1]  ;set the bit -> turn off the LED
   33 00000000         ; mov r3,r3,lsl #1 ;shift up to next bit. P1.16 -> P1.17
                        etc.
   34 00000000         ; cmp r3,r5
   35 00000000         ; bne floop
   36 00000000         ; b wloop
   37 00000000         
   38 00000000         ; ----------------------------------------------
   39 00000000         ;loading stuff for displaying
   40 00000000         ; LDR R0, =IO_DIR
   41 00000000         ; LDR R1, =0x000F0000  ; select P1.19 through P1.16
   42 00000000         ; STR R1, [R0]   ; set as outputs
   43 00000000         ; LDR R0, =IO_SET   ; 
   44 00000000         ; STR R1, [R0]   ; set the bits to turn off the LEDs
   45 00000000         ; LDR R1, =IO_CLR   ;
   46 00000000         ; R0 = set reg
   47 00000000         ; R1 = clr reg
   48 00000000         
   49 00000000         
   50 00000000         ;convert to bcd  
   51 00000000 E59F00C4        LDR              R0, =binNum ; load num
   52 00000004 E5900000        LDR              R0, [R0]



ARM Macro Assembler    Page 2 


   53 00000008 E3A01102        LDR              R1, =0x80000000 ; load mask
   54 0000000C E0011000        AND              R1, R1, R0  ; num && mask
   55 00000010         
   56 00000010 E3510000        CMP              R1, #0      ; if (num < 0)
   57 00000014 0A000004        BEQ              isPositive  ; {
   58 00000018 E3A0200A        LDR              R2, =0xA    ;   minus = 2_1010
   59 0000001C E59F30AC        LDR              R3, =wrdSpace ;   addr = wrdSpa
                                                            ce.addr
   60 00000020 E5C32000        STRB             R2, [R3]    ;   storeSign()
   61 00000024 E2600000        NEG              R0, R0      ;  num.2's compleme
                                                            nt()
   62 00000028 EA000002        B                isNegative  ; } 
   63 0000002C         isPositive                           ; else{
   64 0000002C E3A0200B        LDR              R2, =0xB    ;   plus = 2_1011
   65 00000030 E59F3098        LDR              R3, =wrdSpace ;   addr = wrdSpa
                                                            ce.addr
   66 00000034 E5C32000        STRB             R2, [R3]    ;   storeSign()
   67 00000038         isNegative                           ; }
   68 00000038         
   69 00000038         ; Find the number of digits in the number
   70 00000038 E3A01000        LDR              R1, =0      ; length = 0
   71 0000003C E3A02001        LDR              R2, =1      ; power = 0
   72 00000040 E3A0300A        LDR              R3, =10     ; multiplier = 10
   73 00000044         pwrNotFound                          ; while (power <= n
                                                            um)
   74 00000044 E1520000        CMP              R2, R0      ; {
   75 00000048 CA000002        BGT              pwrFound    ;  
   76 0000004C E0020293        MUL              R2, R3, R2  ;  power = power * 
                                                            10
   77 00000050 E2811001        ADD              R1, R1, #1  ;  length++
   78 00000054 EAFFFFFA        B                pwrNotFound ; 
   79 00000058         pwrFound                             ; }
   80 00000058         
   81 00000058         ; Find each of the characters
   82 00000058 E59F6070        LDR              R6, =wrdSpace ; addr = wrdSpace
                                                            .addr
   83 0000005C E3A07001        LDR              R7, =1      ; offset = 1
   84 00000060 E1A02001        MOV              R2, R1      ; tmpLength = lengt
                                                            h
   85 00000064         charsLeft                            ;
   86 00000064 E3520000        CMP              R2, #0      ; while (tmpLength 
                                                            > 0)
   87 00000068 0A000016        BEQ              noCharsLeft ; {
   88 0000006C E3A03001        LDR              R3, =1      ;   numPwr = 1
   89 00000070 E3A04001        LDR              R4, =1      ;   tmpLengthTwo = 
                                                            1
   90 00000074 E3A0500A        LDR              R5, =10     ;   multiplier = 10
                                                            
   91 00000078         ;
   92 00000078         subLenNotFound                       ;    
   93 00000078 E1520004        CMP              R2, R4      ;    while (tmpLeng
                                                            th > tmpLengthTwo)
   94 0000007C 0A000002        BEQ              subLenFound ;    {
   95 00000080 E0030395        MUL              R3, R5, R3  ;    numPwr = numPw
                                                            r * 10
   96 00000084 E2844001        ADD              R4, R4, #1  ;    tmpLengthTwo++
                                                            
   97 00000088 EAFFFFFA        B                subLenNotFound ;
   98 0000008C         subLenFound                          ;   }



ARM Macro Assembler    Page 3 


   99 0000008C         ;
  100 0000008C E3A04000        LDR              R4, =0      ;   resChar = 0
  101 00000090         charNotFound                         ;  
  102 00000090 E1530000        CMP              R3, R0      ;  while (numPwr <=
                                                             num)
  103 00000094 CA000002        BGT              charFound   ;  {
  104 00000098 E0400003        SUB              R0, R0, R3  ;   num = num - num
                                                            Pwr
  105 0000009C E2844001        ADD              R4, R4, #1  ;    resChar++
  106 000000A0 EAFFFFFA        B                charNotFound ;
  107 000000A4         charFound                            ;   }
  108 000000A4         ;
  109 000000A4 E3540000        CMP              R4, #0      ;  if (resChar == 0
                                                            )
  110 000000A8 1A000002        BNE              notZero     ;  {
  111 000000AC E3A0400F        LDR              R4, =0xF    ;    resChar = 2_11
                                                            11
  112 000000B0 E7C64007        STRB             R4, [R6, R7] ;   storeSign(offs
                                                            et)
  113 000000B4 EA000000        B                incStuff    ;  }
  114 000000B8         notZero                              ;  else{
  115 000000B8 E7C64007        STRB             R4, [R6, R7] ;   storeSign(offs
                                                            et)
  116 000000BC         incStuff                             ;  }
  117 000000BC         ;
  118 000000BC E2877001        ADD              R7, R7, #1  ;  offset++
  119 000000C0 E2422001        SUB              R2, R2, #1  ;  tmpLength--
  120 000000C4 EAFFFFE6        B                charsLeft   ; 
  121 000000C8         noCharsLeft                          ; }
  122 000000C8         
  123 000000C8         
  124 000000C8         
  125 000000C8 EAFFFFFE 
                       stop    B                stop
  126 000000CC         
  127 000000CC 00000000 
              00000000 
              00000000 
              00000000         AREA             TestData, DATA, READWRITE
  128 00000000         
  129 00000000 00000010 
                       binNum  DCD              0x10        ; the binary number
                                                             to be converted
  130 00000004         
  131 00000004 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 wrdSpace
                               SPACE            12          ; assign 12 bytes o
                                                            f free space to sto
                                                            re the characters 
  132 00000010                 END
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\a
pp.d -o.\app.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Ke
il_v5\ARM\INC\Philips --predefine="__EVAL SETA 1" --predefine="__MICROLIB SETA 
1" --predefine="__UVISION_VERSION SETA 524" --list=.\listings\app.lst App.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

AsmTemplate 00000000

Symbol: AsmTemplate
   Definitions
      At line 1 in file App.s
   Uses
      None
Comment: AsmTemplate unused
charFound 000000A4

Symbol: charFound
   Definitions
      At line 107 in file App.s
   Uses
      At line 103 in file App.s
Comment: charFound used once
charNotFound 00000090

Symbol: charNotFound
   Definitions
      At line 101 in file App.s
   Uses
      At line 106 in file App.s
Comment: charNotFound used once
charsLeft 00000064

Symbol: charsLeft
   Definitions
      At line 85 in file App.s
   Uses
      At line 120 in file App.s
Comment: charsLeft used once
incStuff 000000BC

Symbol: incStuff
   Definitions
      At line 116 in file App.s
   Uses
      At line 113 in file App.s
Comment: incStuff used once
isNegative 00000038

Symbol: isNegative
   Definitions
      At line 67 in file App.s
   Uses
      At line 62 in file App.s
Comment: isNegative used once
isPositive 0000002C

Symbol: isPositive
   Definitions
      At line 63 in file App.s
   Uses
      At line 57 in file App.s
Comment: isPositive used once
noCharsLeft 000000C8

Symbol: noCharsLeft



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 121 in file App.s
   Uses
      At line 87 in file App.s
Comment: noCharsLeft used once
notZero 000000B8

Symbol: notZero
   Definitions
      At line 114 in file App.s
   Uses
      At line 110 in file App.s
Comment: notZero used once
pwrFound 00000058

Symbol: pwrFound
   Definitions
      At line 79 in file App.s
   Uses
      At line 75 in file App.s
Comment: pwrFound used once
pwrNotFound 00000044

Symbol: pwrNotFound
   Definitions
      At line 73 in file App.s
   Uses
      At line 78 in file App.s
Comment: pwrNotFound used once
start 00000000

Symbol: start
   Definitions
      At line 8 in file App.s
   Uses
      At line 7 in file App.s
Comment: start used once
stop 000000C8

Symbol: stop
   Definitions
      At line 125 in file App.s
   Uses
      At line 125 in file App.s
Comment: stop used once
subLenFound 0000008C

Symbol: subLenFound
   Definitions
      At line 98 in file App.s
   Uses
      At line 94 in file App.s
Comment: subLenFound used once
subLenNotFound 00000078

Symbol: subLenNotFound
   Definitions
      At line 92 in file App.s
   Uses



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 97 in file App.s
Comment: subLenNotFound used once
15 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

TestData 00000000

Symbol: TestData
   Definitions
      At line 127 in file App.s
   Uses
      None
Comment: TestData unused
binNum 00000000

Symbol: binNum
   Definitions
      At line 129 in file App.s
   Uses
      At line 51 in file App.s
Comment: binNum used once
wrdSpace 00000004

Symbol: wrdSpace
   Definitions
      At line 131 in file App.s
   Uses
      At line 59 in file App.s
      At line 65 in file App.s
      At line 82 in file App.s

3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

IO_CLR E002801C

Symbol: IO_CLR
   Definitions
      At line 12 in file App.s
   Uses
      None
Comment: IO_CLR unused
IO_DIR E0028018

Symbol: IO_DIR
   Definitions
      At line 10 in file App.s
   Uses
      None
Comment: IO_DIR unused
IO_SET E0028014

Symbol: IO_SET
   Definitions
      At line 11 in file App.s
   Uses
      None
Comment: IO_SET unused
3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

main 00000000

Symbol: main
   Definitions
      At line 2 in file App.s
   Uses
      None
Comment: main unused
1 symbol
357 symbols in table
